import os
import configparser
import common as com
import fileGen as fg

config = configparser.ConfigParser()
config.readfp(open("G4gen.ini","r"))

version = '0.0'
com.headStr  = '//*********************************************\n'
com.headStr += '//  This is auto generated by G4gen '+version+'\n'
com.headStr += '//                                  author:Qian\n\n'

temPath = './template/source/'
outPath   = './output/'

if os.path.exists(outPath) == False:
    os.mkdir(outPath)
if os.path.exists(outPath+'/source') == False:
    os.mkdir(outPath+'/source')
if os.path.exists(outPath+'./debug') == False:
    os.mkdir(outPath+'./debug')
if os.path.exists(outPath+'./source/src') == False:
    os.mkdir(outPath+'./source/src')
if os.path.exists(outPath+'./source/include') == False:
    os.mkdir(outPath+'./source/include')
if os.path.exists(outPath+'./source/xml') == False:
    os.mkdir(outPath+'./source/xml')

#===========================
# Gen main file
fg.readIniMain(config)

fg.commonReplace(temPath+'/Framework.cc',  outPath+'/source/'+com.mainfilename+'.cc')

#===========================
# Gen actionclass file

fg.commonReplace(temPath+'/src/MyActionInitialization.cc',      outPath+'/source/src/'+com.actionClass+'.cc')
fg.commonReplace(temPath+'/include/MyActionInitialization.hh',  outPath+'/source/include/'+com.actionClass+'.hh')

#===========================
# Gen detclass file

fg.commonReplace(temPath+'/src/MyDetectorConstruction.cc',      outPath+'/source/src/'+com.detecClass+'.cc')
fg.commonReplace(temPath+'/include/MyDetectorConstruction.hh',  outPath+'/source/include/'+com.detecClass+'.hh')

genDet = com.genDet(config, temPath+'/src/MyDetectorTemplate.cc')
fg.detReplace(genDet, outPath+'/source/include/'+com.detecClass+'.hh')
fg.detReplace(genDet, outPath+'/source/src/'+com.detecClass+'.cc')

#===========================
# Gen detMes class file

fg.commonReplace(temPath+'/src/MyDetectorMessenger.cc',      outPath+'/source/src/'+com.detmesClass+'.cc')
fg.commonReplace(temPath+'/include/MyDetectorMessenger.hh',  outPath+'/source/include/'+com.detmesClass+'.hh')

fg.detReplace(genDet, outPath+'/source/include/'+com.detmesClass+'.hh')
fg.detReplace(genDet, outPath+'/source/src/'+com.detmesClass+'.cc')

#===========================
# Gen envclass file

fg.commonReplace(temPath+'/src/MyEventAction.cc',      outPath+'/source/src/'+com.eventClass+'.cc')
fg.commonReplace(temPath+'/include/MyEventAction.hh',  outPath+'/source/include/'+com.eventClass+'.hh')

#===========================
# Gen gunclass file

fg.commonReplace(temPath+'/src/MyPrimaryGeneratorAction.cc',      outPath+'/source/src/'+com.gunClass+'.cc')
fg.commonReplace(temPath+'/include/MyPrimaryGeneratorAction.hh',  outPath+'/source/include/'+com.gunClass+'.hh')

genGun = com.genGun(config, temPath+'/src/MyPrimaryGeneratorTemplate.cc')
fg.gunReplace(genGun, outPath+'/source/include/'+com.gunClass+'.hh')
fg.gunReplace(genGun, outPath+'/source/src/'+com.gunClass+'.cc')

#===========================
# Gen gunMes class file

fg.commonReplace(temPath+'/src/MyPrimaryGeneratorMessenger.cc',      outPath+'/source/src/'+com.gunmesClass+'.cc')
fg.commonReplace(temPath+'/include/MyPrimaryGeneratorMessenger.hh',  outPath+'/source/include/'+com.gunmesClass+'.hh')

fg.gunReplace(genGun, outPath+'/source/include/'+com.gunmesClass+'.hh')
fg.gunReplace(genGun, outPath+'/source/src/'+com.gunmesClass+'.cc')

#===========================
# Gen runclass file

fg.commonReplace(temPath+'/src/MyRunAction.cc',      outPath+'/source/src/'+com.runClass+'.cc')
fg.commonReplace(temPath+'/include/MyRunAction.hh',  outPath+'/source/include/'+com.runClass+'.hh')

#===========================
# Gen stackClass file

fg.commonReplace(temPath+'/src/MyStackingAction.cc',      outPath+'/source/src/'+com.stackClass+'.cc')
fg.commonReplace(temPath+'/include/MyStackingAction.hh',  outPath+'/source/include/'+com.stackClass+'.hh')

#===========================
# Gen stepClass file

fg.commonReplace(temPath+'/src/MySteppingAction.cc',      outPath+'/source/src/'+com.stepClass+'.cc')
fg.commonReplace(temPath+'/include/MySteppingAction.hh',  outPath+'/source/include/'+com.stepClass+'.hh')

#===========================
# Gen trackClass file

fg.commonReplace(temPath+'/src/MyTrackingAction.cc',      outPath+'/source/src/'+com.trackClass+'.cc')
fg.commonReplace(temPath+'/include/MyTrackingAction.hh',  outPath+'/source/include/'+com.trackClass+'.hh')

#===========================
# Gen analysisManager file

fg.commonReplace(temPath+'/src/MyAnalysisManager.cc',      outPath+'/source/src/'+com.analysisClass+'.cc')
fg.commonReplace(temPath+'/include/MyAnalysisManager.hh',  outPath+'/source/include/'+com.analysisClass+'.hh')

#===========================
# Gen simEvent file

fg.commonReplace(temPath+'/include/SimEvent.h',  outPath+'/source/include/SimEvent.h')
fg.commonReplace(temPath+'/include/Verbose.hh',  outPath+'/source/include/Verbose.hh')
fg.commonReplace(temPath+'/CMakeLists.txt',  outPath+'/source/CMakeLists.txt')

#===========================
# copy config files
open(outPath+'/source/run.mac', "wb").write(open(temPath+'/run.mac', "rb").read())
open(outPath+'/source/vis.mac', "wb").write(open(temPath+'/vis.mac', "rb").read())
open(outPath+'/source/init_vis.mac', "wb").write(open(temPath+'/init_vis.mac', "rb").read())

open(outPath+'/source/RootFileIO.cc', "wb").write(open(temPath+'/RootFileIO.cc', "rb").read())
open(outPath+'/source/RootFileIO.C', "wb").write(open(temPath+'/RootFileIO.C', "rb").read())

open(outPath+'/source/xml/selection.xml', "wb").write(open(temPath+'/xml/selection.xml', "rb").read())







