import os
import ConfigParser
config = ConfigParser.ConfigParser()
config.readfp(open("G4gen.ini","r"))

version = '0.0'
headStr = '//  This is auto generated by G4gen '+version+'\n// \t\t\tauthor:Qian\n'

templatePath = './template/source/'
outputPath   = './output/'

if os.path.exists(outputPath+'./source') == False:
    os.mkdir(outputPath+'./source')
if os.path.exists(outputPath+'./debug') == False:
    os.mkdir(outputPath+'./debug')
if os.path.exists(outputPath+'./source/src') == False:
    os.mkdir(outputPath+'./source/src')
if os.path.exists(outputPath+'./source/include') == False:
    os.mkdir(outputPath+'./source/include')
if os.path.exists(outputPath+'./source/xml') == False:
    os.mkdir(outputPath+'./source/xml')


def loadArray(path, records):  
  
    try:  
        file = open(path, "r")     # open file in read mode  
    except IOError as message:     # file open failed  
        print("read file error({0}:{1})".format(message, path))  
        sys.exit(1)  
  
    lines = file.readlines()  
    for line in lines:  
        records.append(line)  
  
    file.close()  



def saveArray(path, records):  
  
    try:  
        file = open(path, "w")     # open file in write mode  
    except IOError as message:     # file open failed  
        print("write file error({0}:{1})".format(message, path))  
        sys.exit(1)  
  
    file.writelines(records)  
  
    file.close()



def commonReplace(recIn, recOut):
    for line in recIn:
        filter = line
        filter = filter.replace('$MAINENTRYS$', mainfilename)  
        filter = filter.replace('$MyActionInitialization$', actionClass)  
        filter = filter.replace('$MyDetectorConstruction$', detecClass)  
        filter = filter.replace('$MyPhysics$', physicsClass)  
        filter = filter.replace('$Verbose$', addVerbose)  
        filter = filter.replace('$RandomEng$', randomEng)  
        filter = filter.replace('$MyActionInitialization$', actionClass)  
        filter = filter.replace('$MyPrimaryGeneratorAction$', gunClass)  
        filter = filter.replace('$MyRunAction$', runClass)  
        filter = filter.replace('$MyEventAction$', eventClass)  
        filter = filter.replace('$MySteppingAction$', stepClass)  
        filter = filter.replace('$MyStackingAction$', stackClass)  
        filter = filter.replace('$MyTrackingAction$', trackClass)  
        filter = filter.replace('$MyAnalysisManager$',analysisClass)
        recOut.append(filter)  


#===========================
# Gen main file
mainfilename = config.get("main", "EntryFuncName")
addVerbose   = config.get("main", "AddUsrVerbose") 
randomEng    = config.get("main", "RandomEngine")
actionClass  = config.get("main", "ActionClass")
detecClass   = config.get("main", "DetectorClass")
physicsClass = config.get("main", "PhysicsClass")
gunClass     = config.get("main", "GunClass")
runClass     = config.get("main", "RunClass")
eventClass   = config.get("main", "EventClass")
stepClass    = config.get("main", "StepClass")
stackClass   = config.get("main", "StackClass")
trackClass   = config.get("main", "TrackClass")
analysisClass= config.get("main", "AnalysisClass")

srcIn = []  
srcPath = templatePath+'/Framework.cc'
loadArray(srcPath, srcIn)  
  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/'+mainfilename+'.cc', srcOut)


#===========================
# Gen actionclass file

srcIn = []  
srcPath = templatePath+'/src/MyActionInitialization.cc'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/src/'+actionClass+'.cc', srcOut)


srcIn = []  
srcPath = templatePath+'/include/MyActionInitialization.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/'+actionClass+'.hh', srcOut)


#===========================
# Gen detclass file

srcIn = []  
srcPath = templatePath+'/src/MyDetectorConstruction.cc'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/src/'+detecClass+'.cc', srcOut)


srcIn = []  
srcPath = templatePath+'/include/MyDetectorConstruction.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/'+detecClass+'.hh', srcOut)


#===========================
# Gen envclass file

srcIn = []  
srcPath = templatePath+'/src/MyEventAction.cc'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/src/'+eventClass+'.cc', srcOut)


srcIn = []  
srcPath = templatePath+'/include/MyEventAction.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/'+eventClass+'.hh', srcOut)


#===========================
# Gen gunclass file

srcIn = []  
srcPath = templatePath+'/src/MyPrimaryGeneratorAction.cc'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/src/'+gunClass+'.cc', srcOut)


srcIn = []  
srcPath = templatePath+'/include/MyPrimaryGeneratorAction.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/'+gunClass+'.hh', srcOut)


#===========================
# Gen runclass file

srcIn = []  
srcPath = templatePath+'/src/MyRunAction.cc'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/src/'+runClass+'.cc', srcOut)


srcIn = []  
srcPath = templatePath+'/include/MyRunAction.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/'+runClass+'.hh', srcOut)


#===========================
# Gen stackClass file

srcIn = []  
srcPath = templatePath+'/src/MyStackingAction.cc'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/src/'+stackClass+'.cc', srcOut)


srcIn = []  
srcPath = templatePath+'/include/MyStackingAction.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/'+stackClass+'.hh', srcOut)


#===========================
# Gen stepClass file

srcIn = []  
srcPath = templatePath+'/src/MySteppingAction.cc'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/src/'+stepClass+'.cc', srcOut)


srcIn = []  
srcPath = templatePath+'/include/MySteppingAction.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/'+stepClass+'.hh', srcOut)



#===========================
# Gen trackClass file

srcIn = []  
srcPath = templatePath+'/src/MyTrackingAction.cc'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/src/'+trackClass+'.cc', srcOut)


srcIn = []  
srcPath = templatePath+'/include/MyTrackingAction.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/'+trackClass+'.hh', srcOut)


#===========================
# Gen analysisManager file

srcIn = []  
srcPath = templatePath+'/src/MyAnalysisManager.cc'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/src/'+analysisClass+'.cc', srcOut)


srcIn = []  
srcPath = templatePath+'/include/MyAnalysisManager.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/'+analysisClass+'.hh', srcOut)


#===========================
# Gen simEvent file

srcIn = []  
srcPath = templatePath+'/include/SimEvent.h'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/SimEvent.h', srcOut)

srcIn = []  
srcPath = templatePath+'/include/Verbose.hh'
loadArray(srcPath, srcIn)  
srcOut = []
srcOut.append(headStr)
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/include/Verbose.hh', srcOut)

srcIn = []  
srcPath = templatePath+'/CMakeLists.txt'
loadArray(srcPath, srcIn)  
srcOut = []
commonReplace(srcIn, srcOut)
saveArray(outputPath+'/source/CMakeLists.txt', srcOut)

#===========================
# copy config files
open(outputPath+'/source/run.mac', "wb").write(open(templatePath+'/run.mac', "rb").read())
open(outputPath+'/source/vis.mac', "wb").write(open(templatePath+'/vis.mac', "rb").read())
open(outputPath+'/source/init_vis.mac', "wb").write(open(templatePath+'/init_vis.mac', "rb").read())

open(outputPath+'/source/RootFileIO.cc', "wb").write(open(templatePath+'/RootFileIO.cc', "rb").read())
open(outputPath+'/source/RootFileIO.C', "wb").write(open(templatePath+'/RootFileIO.C', "rb").read())

open(outputPath+'/source/xml/selection.xml', "wb").write(open(templatePath+'/xml/selection.xml', "rb").read())
















